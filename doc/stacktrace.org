* Orchard Stacktraces

** Introduction

Stacktraces are a hot topic in the Clojure community. As a Clojurist
you deal with them in different kinds of situations. Sometimes you
catch them "live", like an exception just thrown in a REPL. Other times
you find them as text, printed in a REPL, or in a log file. Or worst,
a printed exception buried inside another string, impossible to
read. And of course, there are different kinds of formats.

Tooling helps, and Orchard provides functionality to parse and analyze
stacktraces to such tools. Orchard has stacktrace parsers for some of
the commonly used formats in which stacktraces are printed, and an
analyzer that enriches a stacktrace with additional information.

** Parser

An Orchard stacktrace parser transforms input into a parse result. On
success, the parse result is a enhanced version of the Clojure data
representation of a Throwable, a map with the following keys:

- =:cause= The root cause message as a string.
- =:phase= The error phase (optional).
- =:via= The cause chain, with each cause having the keys:
  - =:at= The top stack element of the cause as a vector (optional).
  - =:data= The =ex-data= of the cause as a map (optional).
  - =:message= The exception message of the cause as a string.
  - =:type= The exception of the cause as a symbol.
  - =:trace= The stack elements (optional, extended by Orchard).
- =:trace=  The root cause stack elements

This is mostly the same format as used by =Throwable->map= in newer
Clojure versions, except for the additional =:trace= key in the cause
maps of =:via=.

On failure the parse result is a map with an =:error= key, and
possibly other keys describing the error.

A parse result can be given to the Orchard analyzer to enrich it with
more information.

*** Supported formats

Stacktraces come in different formats. Orchard supports the following
flavors:

- =:aviso= Stacktraces printed with the [[https://ioavisopretty.readthedocs.io/en/latest/exceptions.html][write-exception]] function of
  the [[https://github.com/AvisoNovate/pretty][Aviso]] library.

- =:clojure.tagged-literal= Stacktraces printed as a tagged literal,
  like a [[https://docs.oracle.com/javase/8/docs/api/java/lang/Throwable.html][java.lang.Throwable]] printed with the [[https://clojure.github.io/clojure/branch-master/clojure.core-api.html#clojure.core/pr][pr]] function.

- =:clojure.stacktrace= Stacktraces printed with the [[https://clojure.github.io/clojure/branch-master/clojure.stacktrace-api.html#clojure.stacktrace/print-cause-trace][print-cause-trace]]
  function of the [[https://clojure.github.io/clojure/branch-master/clojure.stacktrace-api.html][clojure.stacktrace]] namespace.

- =:clojure.repl= Stacktraces printed with the [[https://clojure.github.io/clojure/branch-master/clojure.repl-api.html#clojure.repl/pst][pst]] function of the
  [[https://clojure.github.io/clojure/branch-master/clojure.repl-api.html][clojure.repl]] namespace.

- =:java= Stacktraces printed with the [[https://docs.oracle.com/javase/8/docs/api/java/lang/Throwable.html#printStackTrace--][printStackTrace]] method of
  [[https://docs.oracle.com/javase/8/docs/api/java/lang/Throwable.html][java.lang.Throwable]].

** Analyzer

The Orchard stacktrace analyzer transforms a stacktrace into an
analysis. An analysis is a sequence of Clojure maps, one for each of
the causes of the stacktrace, with the following keys:

- =:class= The exception class as a string.
- =:message= The exception message as a string.
- =:stacktrace= The stacktrace frames, a list of maps.
- =:data= The exception data.
- =:location= The location formation of the exception.

A frame in the =:stacktrace= is a map with the following keys:

- =:class= The class name of the frame invocation.
- =:file-url= The URL of the frame source file.
- =:file= The file name of the frame source.
- =:flags= The flags of the frame.
- =:line= The line number of the frame source.
- =:method= The method or function name of the frame invocation.
- =:name= The name of the frame, typically the class and method of the invocation.
- =:type= The type of invocation (=:java=, =:tooling=, etc).
