version: 2.1

# Default settings for executors

defaults: &defaults
  working_directory: ~/repo
  environment:
    JVM_OPTS: -Xmx3200m -Dclojure.main.report=stderr

# Runners for each major OpenJDK

executors:
  jdk8:
    docker:
      - image: clojure:temurin-8-lein-2.11.2-noble
    <<: *defaults
  jdk11:
    docker:
      - image: clojure:temurin-11-lein-2.11.2-noble
    <<: *defaults
  jdk17:
    docker:
      - image: clojure:temurin-17-lein-2.11.2-noble
    <<: *defaults
  jdk21:
    docker:
      - image: clojure:temurin-21-lein-2.11.2-noble
    <<: *defaults
  jdk22:
    docker:
      - image: clojure:temurin-22-lein-2.11.2-noble
    <<: *defaults

# Runs a given set of steps, with some standard pre- and post-
# steps, including restoring of cache, saving of cache.
#
# Adapted from https://github.com/lambdaisland/meta/blob/master/circleci/clojure_orb.yml

commands:
  with_cache:
    description: |
      Run a set of steps with Maven dependencies and Clojure classpath cache
      files cached.
      This command restores ~/.m2, .cpcache and such if they were previously cached,
      then runs the provided steps, and finally saves the cache.
      The cache-key is generated based on the contents of `deps.edn` present in
      the `working_directory`.
    parameters:
      steps:
        type: steps
      clojure_version:
        description: Will be used as part of the cache key
        type: string
      files:
        description: Files to consider when creating the cache key
        type: string
        default: "deps.edn project.clj"
      cache_version:
        type: string
        description: "Change this value to force a cache update"
        default: "1"
    steps:
      - run:
          name: Install wget
          command: |
            apt-get update && apt-get install -y wget unzip zip
      - run:
          name: Checkout submodules
          command: make submodules
      - run:
          name: Generate Cache Checksum
          command: |
            for file in << parameters.files >>
            do
              find . -name $file -exec cat {} +
            done | sha256sum | awk '{print $1}' > /tmp/clojure_cache_seed
      - restore_cache:
          key: cache-<< parameters.cache_version >>-<< parameters.clojure_version >>-{{ checksum "/tmp/clojure_cache_seed" }}
      - steps: << parameters.steps >>
      - save_cache:
          paths:
            - ~/.m2
            - .cpcache
            - base-src.zip
          key: cache-<< parameters.cache_version >>-<< parameters.clojure_version >>-{{ checksum "/tmp/clojure_cache_seed" }}

jobs:

  lint:
    parameters:
      jdk_version:
        type: string
        default: jdk21
      clojure_version:
        type: string
        default: "1.11"
    executor: << parameters.jdk_version >>
    environment:
      CLOJURE_VERSION: << parameters.clojure_version >>
    steps:
      - checkout
      - with_cache:
          cache_version: "lint_v1"
          clojure_version: << parameters.clojure_version >>
          steps:
            - run:
                name: Running cljfmt
                command: make cljfmt
            - run:
                name: Running clj-kondo
                command: make kondo

  eastwood:
    description: |
      Run Eastwood on source code against given version of JDK and Clojure
    parameters:
      jdk_version:
        type: string
      clojure_version:
        type: string
    executor: << parameters.jdk_version >>
    environment:
      CLOJURE_VERSION: << parameters.clojure_version >>
      TEST_PROFILES: "-user,-dev,+test,+cljs"
    steps:
      - checkout
      - with_cache:
          clojure_version: << parameters.clojure_version >>
          cache_version: "eastwood_v1"
          steps:
            # Eastwood is run for every Clojure and JDK version because its
            # results are sensitive to the code in the runtime.
            - run:
                name: Running Eastwood
                command: make eastwood

  deploy:
    executor: jdk8
    steps:
      - checkout
      - run:
         name: Deploy
         command: |
           TEST_PROFILES= lein with-profile -user,+deploy run -m deploy-release make deploy

  test:
    description: |
      Run tests against given version of JDK and Clojure
    parameters:
      command:
        description: Command to pass to Make
        type: string
        default: test
      jdk_version:
        description: Version of JDK to test against
        type: string
      clojure_version:
        description: Version of Clojure to test against
        type: string
      parser_target:
        description: The Java parser to be exercised
        type: string
        default: parser
    executor: << parameters.jdk_version >>
    environment:
      CLOJURE_VERSION: << parameters.clojure_version >>
      PARSER_TARGET: << parameters.parser_target >>
    steps:
      - checkout
      - with_cache:
          clojure_version: << parameters.clojure_version >>
          cache_version: test_v1_<< parameters.command >>
          steps:
            - run:
                name: Running tests (make << parameters.command >>)
                command: make << parameters.command >>

# The ci-test-matrix does the following:
#
# - run tests against the target matrix
# - kondo, eastwood and cljfmt

tags_filter: &tags_filter
  tags:
    only: /^v\d+\.\d+\.\d+(-alpha\d+)?$/

workflows:
  version: 2.1
  ci-test-matrix:
    jobs:
      - test:
          # Regular tests for all Clojure and JDK versions (except JDK21, see
          # below). This matrix doesn't perform parser tests because we don't
          # have JDK sources here.
          matrix:
            alias: "test"
            parameters:
              jdk_version: [jdk8, jdk11, jdk17, jdk22]
              clojure_version: ["1.10", "1.11", "1.12"]
          filters:
            branches:
              only: /.*/
            <<: *tags_filter
      - test:
          # We have source for JDK21, so with this JDK version we also perform
          # Java parser tests (for both regular parser and parser-next).
          matrix:
            alias: "test_with_sources"
            parameters:
              jdk_version: [jdk21]
              clojure_version: ["1.10", "1.11", "1.12"]
              parser_target: ["parser", "parser-next"]
          filters:
            branches:
              only: /.*/
            <<: *tags_filter
      - test:
          # Sanity check that we don't have a requirement for Clojurescript or
          # spec-alpha2 being on the classpath.
          matrix:
            alias: "test_no_extra_deps"
            parameters:
              jdk_version: [jdk22]
              clojure_version: ["1.11"]
              command: ["test-no-extra-deps"]
          filters:
            branches:
              only: /.*/
            <<: *tags_filter
      # Eastwood output partly depends on Clojure and JDK version it is run on,
      # so selectively test with several versions of those.
      - eastwood:
          matrix:
            alias: "eastwood"
            parameters:
              jdk_version: [jdk8, jdk22]
              clojure_version: ["1.11", "1.12"]
          filters:
            branches:
              only: /.*/
            <<: *tags_filter
      - lint:
          filters:
            branches:
              only: /.*/
            <<: *tags_filter
      - deploy:
          requires:
            - test
            - test_with_sources
            - test_no_extra_deps
            - eastwood
            - lint
          filters:
            branches:
              ignore: /.*/
            <<: *tags_filter
