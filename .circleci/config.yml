version: 2.1

######################################################################
#
# Start of general purpose config. These can plausibly go into orbs
#
######################################################################

# Default settings for executors

defaults: &defaults
  working_directory: ~/repo
  environment:
    LEIN_ROOT: "true" # we intend to run lein as root
    JVM_OPTS: -Xmx3200m -Dclojure.main.report=stderr

# Runners for each major OpenJDK

executors:
  openjdk8:
    docker:
      - image: clojure:temurin-8-lein-2.11.2-jammy
    <<: *defaults
  openjdk11:
    docker:
      - image: clojure:temurin-11-lein-2.11.2-jammy
    <<: *defaults
  openjdk17:
    docker:
      - image: clojure:temurin-17-lein-2.11.2-jammy
    <<: *defaults
  openjdk21:
    docker:
      - image: clojure:temurin-21-lein-2.11.2-jammy
    <<: *defaults
  openjdk22:
    docker:
      - image: clojure:temurin-22-lein-2.11.2-jammy
    <<: *defaults

# Runs a given set of steps, with some standard pre- and post-
# steps, including restoring of cache, saving of cache.
#
# we also install `make` here.
#
# Adapted from https://github.com/lambdaisland/meta/blob/master/circleci/clojure_orb.yml

commands:
  with_cache:
    description: |
      Run a set of steps with Maven dependencies and Clojure classpath cache
      files cached.
      This command restores ~/.m2, .cpcache and such if they were previously cached,
      then runs the provided steps, and finally saves the cache.
      The cache-key is generated based on the contents of `deps.edn` present in
      the `working_directory`.
    parameters:
      steps:
        type: steps
      jdk_version:
        description: Will be used as part of the cache key. Especially important for unzipped-jdk-source
        type: string
      clojure_version:
        description: Will be used as part of the cache key. Especially important for unzipped-jdk-source
        type: string
      parser_target:
        description: The Java parser to be exercised
        type: string
      files:
        description: Files to consider when creating the cache key
        type: string
        default: "deps.edn project.clj build.boot"
      cache_version:
        type: string
        description: "Change this value to force a cache update"
        default: "1"
    steps:
      - run:
          name: Install git
          command: |
            apt-get update && apt-get install -y git
      - run:
          name: Generate Cache Checksum
          command: |
            for file in << parameters.files >>
            do
              find . -name $file -exec cat {} +
            done | sha256sum | awk '{print $1}' > /tmp/clojure_cache_seed
      - restore_cache:
          key: clojure-<< parameters.cache_version >>-<< parameters.jdk_version >>-<< parameters.clojure_version >>-{{ checksum "/tmp/clojure_cache_seed" }}
      - steps: << parameters.steps >>
      - save_cache:
          paths:
            - ~/.m2
            - .cpcache
            - unzipped-jdk-source
          key: clojure-<< parameters.cache_version >>-<< parameters.jdk_version >>-<< parameters.clojure_version >>-{{ checksum "/tmp/clojure_cache_seed" }}

# The jobs are relatively simple. One runs utility commands against
# latest stable JDK + Clojure, the other against specified versions

jobs:

  util_job:
    description: |
      Running utility commands/checks (linter etc.)
      Always uses Java11 and Clojure 1.11
    parameters:
      jdk_version:
        description: Version of JDK to test against
        type: string
      steps:
        type: steps
    executor: << parameters.jdk_version >>
    environment:
      VERSION: "1.11"
    steps:
      - checkout
      - with_cache:
          parser_target: "parser"
          cache_version: "util-job-v1"
          jdk_version: << parameters.jdk_version >>
          clojure_version: "1.11"
          steps: << parameters.steps >>

  deploy:
    executor: openjdk8
    steps:
      - checkout
      - run:
         name: Deploy
         command: |
           TEST_PROFILES= lein with-profile -user,+deploy run -m deploy-release make deploy

  test_code:
    description: |
      Run tests against given version of JDK and Clojure
    parameters:
      jdk_version:
        description: Version of JDK to test against
        type: string
      clojure_version:
        description: Version of Clojure to test against
        type: string
      test_profiles:
        description: Maps directly to the TEST_PROFILES var in Makefile
        type: string
      parser_target:
        description: The Java parser to be exercised
        type: string
    executor: << parameters.jdk_version >>
    environment:
      VERSION: << parameters.clojure_version >>
      TEST_PROFILES: << parameters.test_profiles >>
    steps:
      - checkout
      - with_cache:
          jdk_version: << parameters.jdk_version >>
          clojure_version: << parameters.clojure_version >>
          parser_target: << parameters.parser_target >>
          cache_version: "test_code-v2"
          steps:
            - run:
                name: Running tests
                command: PARSER_TARGET=<< parameters.parser_target >> make test
            # Eastwood is run for every item in the CI matrix, because its results are sensitive to the code in the runtime,
            # so we make the most out of this linter by exercising all profiles, JDK versions, etc.
            - run:
                name: Running Eastwood
                command: make eastwood

######################################################################
#
# End general purpose configs
#
######################################################################


# The ci-test-matrix does the following:
#
# - run tests against the target matrix
#   - Java 8, 11, 17, 21, 22
#   - Clojure 1.9, 1.10, 1.11, master
# - linter, eastwood and cljfmt

workflows:
  version: 2.1
  ci-test-matrix:
    jobs:
      - test_code:
          matrix:
            alias: "test_code_jdk8"
            parameters:
              jdk_version: [openjdk8]
              # Clojure 1.9 is tested only against JDK8.
              clojure_version: ["1.9", "1.10", "1.11", "master"]
              test_profiles: ["-user,-dev,+test,-provided", "-user,-dev,+test,+provided"]
              # It doesn't make sense to exercise the newer Orchard Java parsers against JDK8
              # (given that JDK8 is explicitly excluded by those parsers)
              parser_target: ["legacy-parser"]
          filters:
            branches:
              only: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+(-alpha\d+)?$/
      - test_code:
          matrix:
            alias: "test_code"
            parameters:
              jdk_version: [openjdk11, openjdk17, openjdk21, openjdk22]
              clojure_version: ["1.10", "1.11", "master"]
              test_profiles: ["-user,-dev,+test,-provided", "-user,-dev,+test,+provided"]
              # Don't test legacy parser on JDK11+ since it is never invoked there.
              parser_target: ["parser-next", "parser"]
          filters:
            branches:
              only: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+(-alpha\d+)?$/
      - util_job:
          name: lint_latest_lts
          jdk_version: openjdk21
          steps:
            - run:
                name: Running cljfmt
                command: |
                  make cljfmt
            - run:
                name: Running clj-kondo
                command: |
                  make kondo
          filters:
            branches:
              only: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+(-alpha\d+)?$/
      - deploy:
          requires:
            - test_code
            - test_code_jdk8
            - lint_latest_lts
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+(-alpha\d+)?$/
